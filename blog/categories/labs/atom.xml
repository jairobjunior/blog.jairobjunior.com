<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Labs | @jairobjunior - Mobile Life]]></title>
  <link href="http://www.jairobjunior.com/blog/categories/labs/atom.xml" rel="self"/>
  <link href="http://www.jairobjunior.com/"/>
  <updated>2016-03-07T12:43:40-08:00</updated>
  <id>http://www.jairobjunior.com/</id>
  <author>
    <name><![CDATA[Jairo Barros Junior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Rotate Only One View Controller to Landscape Orientation in iOS Swift]]></title>
    <link href="http://www.jairobjunior.com/blog/2016/03/05/how-to-rotate-only-one-view-controller-to-landscape-in-ios-slash-swift/"/>
    <updated>2016-03-05T23:38:19-08:00</updated>
    <id>http://www.jairobjunior.com/blog/2016/03/05/how-to-rotate-only-one-view-controller-to-landscape-in-ios-slash-swift</id>
    <content type="html"><![CDATA[<p><img class="right half" src="/images/labs/2016-03-06/screens-device-orientation.png" width="395" height="293"></p>

<p>It might be tricky to create a whole iOS Swift project using portrait only and suddenly when your app is far down the road you need to give landscape orientation support for only one View Controller.</p>

<p>Immediately you could think&hellip; &ldquo;I can get this done by using <code>func shouldAutorotate() -&gt; Bool</code> and <code>func supportedInterfaceOrientations() -&gt; UIInterfaceOrientationMask</code>&rdquo;.</p>

<p>The only problem of this is that you&rsquo;ll need to enable device rotation for both <strong>Landscape Left and Right</strong> and depending on your code structure you&rsquo;ll need to go over every simple View Controller adding <code>func shouldAutorotate() -&gt; Bool</code> and <code>func supportedInterfaceOrientations() -&gt; UIInterfaceOrientationMask</code>. It can be painful if you have a lot of classes.</p>

<p>Fortunately we can move all of the hard work to be done in one place, which is in our <em>AppDelegate.swift</em>.</p>

<!--more-->


<h3>Deployment Info &ndash; Device Orientation</h3>

<p>If your project is already in portrait you won&rsquo;t need to change anything. If not, make sure that only portrait is selected.</p>

<p><img src="/images/labs/2016-03-06/device-orientation.png"></p>

<h3>AppDelegate.swift</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AppDelegate.swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">func</span> <span class="n">application</span><span class="p">(</span><span class="nl">application:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="n">supportedInterfaceOrientationsForWindow</span> <span class="nl">window:</span> <span class="n">UIWindow</span><span class="o">?</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">UIInterfaceOrientationMask</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">let</span> <span class="n">rootViewController</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">topViewControllerWithRootViewController</span><span class="p">(</span><span class="n">window</span><span class="o">?</span><span class="p">.</span><span class="n">rootViewController</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">rootViewController</span><span class="p">.</span><span class="n">respondsToSelector</span><span class="p">(</span><span class="n">Selector</span><span class="p">(</span><span class="s">&quot;canRotate&quot;</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Unlock landscape view orientations for this view controller</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">.</span><span class="n">AllButUpsideDown</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Only allow portrait (standard behaviour)</span>
</span><span class='line'><span class="k">return</span> <span class="p">.</span><span class="n">Portrait</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">private</span> <span class="n">func</span> <span class="n">topViewControllerWithRootViewController</span><span class="p">(</span><span class="nl">rootViewController:</span> <span class="n">UIViewController</span><span class="o">!</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">UIViewController</span><span class="o">?</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">rootViewController</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span> <span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">rootViewController</span><span class="p">.</span><span class="n">isKindOfClass</span><span class="p">(</span><span class="n">UITabBarController</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">topViewControllerWithRootViewController</span><span class="p">((</span><span class="n">rootViewController</span> <span class="n">as</span><span class="o">!</span> <span class="n">UITabBarController</span><span class="p">).</span><span class="n">selectedViewController</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">rootViewController</span><span class="p">.</span><span class="n">isKindOfClass</span><span class="p">(</span><span class="n">UINavigationController</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">topViewControllerWithRootViewController</span><span class="p">((</span><span class="n">rootViewController</span> <span class="n">as</span><span class="o">!</span> <span class="n">UINavigationController</span><span class="p">).</span><span class="n">visibleViewController</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">rootViewController</span><span class="p">.</span><span class="n">presentedViewController</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">topViewControllerWithRootViewController</span><span class="p">(</span><span class="n">rootViewController</span><span class="p">.</span><span class="n">presentedViewController</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">rootViewController</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The method <code>topViewControllerWithRootViewController</code> gets the top View Controller from the window and checks if it has the method/selector <code>canRotate</code> implemented, if so <code>.AllButUpsideDown</code> is returned from <code>supportedInterfaceOrientationsForWindow</code>.</p>

<p>Now all you need to do is to implement an empty <code>canRotate</code> on the View Controller that needs be rotated and before it disappears you should return the orientation back to portrait.</p>

<p>Below you can see how our View Controller should be for both scenarios: <em>Show</em> and <em>Present Modally</em></p>

<h3>Show</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ShowViewController.swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="n">viewWillDisappear</span><span class="p">(</span><span class="n">animated</span> <span class="o">:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewWillDisappear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">isMovingFromParentViewController</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIDevice</span><span class="p">.</span><span class="n">currentDevice</span><span class="p">().</span><span class="n">setValue</span><span class="p">(</span><span class="n">Int</span><span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">.</span><span class="n">Portrait</span><span class="p">.</span><span class="n">rawValue</span><span class="p">),</span> <span class="nl">forKey:</span> <span class="s">&quot;orientation&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">canRotate</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Void</span> <span class="p">{}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Present Modally</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ShowViewController.swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">class</span> <span class="nl">PresentedViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">didDismissButtonPress</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">UIButton</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">dismissViewControllerAnimated</span><span class="p">(</span><span class="n">true</span><span class="p">)</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">UIDevice</span><span class="p">.</span><span class="n">currentDevice</span><span class="p">().</span><span class="n">setValue</span><span class="p">(</span><span class="n">Int</span><span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">.</span><span class="n">Portrait</span><span class="p">.</span><span class="n">rawValue</span><span class="p">),</span> <span class="nl">forKey:</span> <span class="s">&quot;orientation&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">canRotate</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Void</span> <span class="p">{}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<hr />

<p>This project sample can be downloaded from <a href="https://github.com/jairobjunior/labs.jairobjunior.com.DeviceRotationOnlyOneViewController">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating UIButton with border and hover native iOS]]></title>
    <link href="http://www.jairobjunior.com/blog/2014/02/08/creating-uibutton-with-border-and-hover-native-ios/"/>
    <updated>2014-02-08T17:43:41-08:00</updated>
    <id>http://www.jairobjunior.com/blog/2014/02/08/creating-uibutton-with-border-and-hover-native-ios</id>
    <content type="html"><![CDATA[<p><img class="right half" src="/images/labs/2014-02-08/app-sample-screenshot.png"></p>

<h3>The problem</h3>

<p>When you are using Interface Builder to create your buttons there is just a few properties that we can change for different <code>UIButton</code>&rsquo;s state.</p>

<p><img src="/images/labs/2014-02-08/uibutton-state-config.png"></p>

<p>So, that brings us some restrictions if we need to change the background color of the highlighted state. I have seen people creating an image of a button relatively simple, but one image for the normal and the other for the highlighted state or some other properties. I confess that it was my approach for a short while, until I had to deal with a bunch of buttons that the only thing that changed was the text, and sometimes an icon embeded in the button.</p>

<p>For that reason I implemented a class to deal with the background of the highlighted state and some border features.</p>

<h3>How to use it?</h3>

<p>First you have to add <a href="https://github.com/jairobjunior/Catfish">Catfish</a> as a dependency to your project, inside of it there is a class <code>CFUIButton</code>. It has methods to:</p>

<!--more-->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CFUIButton.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setBorderColor:</span><span class="p">(</span><span class="n">UIColor</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">color</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setBorderColor:</span><span class="p">(</span><span class="n">UIColor</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">color</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">removeBorder</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setBorderWidth:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">borderWidth</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setCornerRadius:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">cornerRadius</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">setBackgroundColorForHighlightedState:</span><span class="p">(</span><span class="n">UIColor</span><span class="o">*</span><span class="p">)</span><span class="n">color</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">setBackgroundColorForHighlightedState:</span><span class="p">(</span><span class="n">UIColor</span><span class="o">*</span><span class="p">)</span><span class="n">color</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<p>If you are using Interface Builder, the next step is to set <code>CFUIButton</code> as a custom class for your button.</p>

<p><img src="/images/labs/2014-02-08/custom-class-cfuibutton.png"></p>

<p>Cool, and now set your <code>CFUIButton</code> type as custom.</p>

<p><img src="/images/labs/2014-02-08/uibutton-type-config.png"></p>

<p>But if you are creating your button programmatically, you just have to extend <code>CFUIButton</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CFUIButton.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyButton</span> : <span class="nc">CFUIButton</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that you have everying set, lets play with it.</p>

<h3>Setting border color</h3>

<p>There are two different ways to change the border color of the <code>CFUIButton</code>. The first one is for all of the <code>CFUIButton</code> in your application and the second is for a specific <code>CFUIButton</code> instance. The default color for all of the <code>CFUIButton</code> is <code>[UIColor colorWithWhite:1.0 alpha:0.4]</code>.</p>

<h4>Application level:</h4>

<p>Open your <code>AppDelegate.m</code> and add the following code in the method <code>didFinishLaunchingWithOptions</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">CFUIButton</span> <span class="nl">setBorderColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">whiteColor</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You should have something like that:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AppDelegate.m </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">launchOptions</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">CFUIButton</span> <span class="nl">setBorderColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">whiteColor</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Instance level:</h4>

<p>First you have to create a class for your <code>ViewController</code>, for this example I am using <code>MainViewController</code>, after that you have to <a href="https://developer.apple.com/library/ios/recipes/xcode_help-interface_builder/articles-connections_bindings/CreatingOutlet.html#//apple_ref/doc/uid/TP40009971-CH15">reference</a> your <code>CFUIButton</code> with your <code>MainViewController.h</code> and set the instance name <code>customButtonWithBorder</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MainViewController.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">CFUIButton</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">MainViewController</span> : <span class="nc">UIViewController</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">CFUIButton</span> <span class="o">*</span><span class="n">customButtonWithBorder</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, open the class <code>MainViewController.m</code> and add the following line in your <code>- (void)viewDidLoad</code> method:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">_customButtonWithBorder</span> <span class="nl">setBorderColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">yellowColor</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Corner radius</h3>

<p>You also can create button with corner:</p>

<p><img src="/images/labs/2014-02-08/connection-with-facebook.png"></p>

<p>Since that you have your instance variable, in the <code>- (void)viewDidLoad</code> method, add the following line:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">_customButtonWithBorder</span> <span class="nl">setCornerRadius:</span><span class="mf">30.0f</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Removing border</h3>

<p>You can also remove the border if you just want to use the benefit of the <a href="/blog/2014/02/03/creating-uibutton-with-border-and-hover-native-ios/#highlighted">highlighted state color</a>.</p>

<p><img src="/images/labs/2014-02-08/message-without-border.png"></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">_customButtonWithBorder</span> <span class="n">removeBorder</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a id="highlighted"></a></p>

<h3>Highlighted state</h3>

<p>You can change the text color for the highlighted state through the Interface Builder, but to change the background color, it becomes a little bit more complicated, so if you want to have something like that:</p>

<p><img src="/images/labs/2014-02-08/with-different-hover-color.png"> <img src="/images/labs/2014-02-08/with-different-hover-color-selected.png"></p>

<p>You can use:</p>

<h4>Application level:</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AppDelegate.m </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">launchOptions</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">CFUIButtonBorder</span> <span class="nl">setBackgroundColorForHighlightedState:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">whiteColor</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Instance level:</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">_customButtonWithDifferentHoverColor</span> <span class="nl">setBackgroundColorForHighlightedState:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">whiteColor</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<hr />

<p><a href="https://github.com/jairobjunior/labs.jairobjunior.com.ButtonWithBorderAndHover">Download</a> the project sample.</p>
]]></content>
  </entry>
  
</feed>
